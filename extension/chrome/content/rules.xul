<?xml version="1.0"?>

<!-- This Source Code is subject to the terms of the Mozilla Public License
   - version 2.0 (the "License"). You can obtain a copy of the License at
   - http://mozilla.org/MPL/2.0/. -->

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://fireie/skin/rules.css" type="text/css"?>

<!DOCTYPE dialog SYSTEM "chrome://fireie/locale/rules.dtd">

<dialog
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  title="&dialog.title;"
  id="fireieRulesWindow"
  onload="init()"
  buttons="accept"
  width="950"
  height="450"
  persist="screenX screenY width height sizemode"
  windowtype="fireie:rules">

<script type="application/x-javascript" src="utils.js"/>
<script type="application/x-javascript" src="rules.js"/>
<script type="application/x-javascript" src="rules-subscriptionview.js"/>
<script type="application/x-javascript" src="rules-subscriptionactions.js"/>
<script type="application/x-javascript" src="rules-ruleview.js"/>
<script type="application/x-javascript" src="rules-ruleactions.js"/>
<script type="application/x-javascript" src="rules-backup.js"/>
<script type="application/x-javascript" src="rules-search.js"/>

<keyset id="rulesKeyset">
  <key id="subscription-update-key" key="T" modifiers="accel" command="subscription-update-command"/>
  <key id="subscription-update-all-key" key="T" modifiers="accel,shift" command="subscription-update-all-command"/>
  <key id="edit-key" keycode="VK_F2" oncommand="E(RuleActions.focused ? 'rules-edit-command' : 'subscription-editTitle-command').doCommand();"/>
  <key id="delete-key" keycode="VK_DELETE" oncommand="E(RuleActions.focused ? 'rules-delete-command' : 'subscription-delete-command').doCommand();"/>
  <key id="subscription-showHideRules-key" key="R" modifiers="accel" command="subscription-showHideRules-command"/>
  <key id="moveUp-key" keycode="VK_UP" modifiers="accel"/>
  <key id="moveDown-key" keycode="VK_DOWN" modifiers="accel"/>
  <key id="rules-add-key" keycode="VK_INSERT" oncommand="E('rules-add-command').doCommand();"/>
  <key id="rules-selectAll-key" key="A" modifiers="accel" oncommand="if (RuleActions.focused) E('rules-selectAll-command').doCommand();"/>
  <key id="rules-copy-key" key="C" modifiers="accel" oncommand="if (RuleActions.focused) E('rules-copy-command').doCommand();"/>
  <key id="rules-cut-key" key="X" modifiers="accel" oncommand="if (RuleActions.focused) E('rules-cut-command').doCommand();"/>
  <key id="rules-paste-key" key="V" modifiers="accel" oncommand="if (RuleActions.focused) E('rules-paste-command').doCommand();"/>
  <key id="backup-key" key="E" modifiers="accel" oncommand="E('backup').doCommand();"/>
  <key id="restore-key" key="I" modifiers="accel" oncommand="E('restoreOwnBackup').doCommand();"/>
  <key id="find-key" key="F" modifiers="accel" oncommand="if (RuleActions.visible) E('find-command').doCommand();"/>
  <key id="find-again-key" key="G" modifiers="accel" oncommand="if (RuleActions.visible) E('find-again-command').doCommand();"/>
  <key id="find-previous-key" key="G" modifiers="accel,shift" oncommand="if (RuleActions.visible) E('find-previous-command').doCommand();"/>
  <key id="find-again-key2" keycode="VK_F3" oncommand="if (RuleActions.visible) E('find-again-command').doCommand();"/>
  <key id="find-previous-key2" keycode="VK_F3" modifiers="shift" oncommand="if (RuleActions.visible) E('find-previous-command').doCommand();"/>
</keyset>

<commandset id="rulesCommandset">
  <command id="subscription-update-command" oncommand="SubscriptionActions.updateRules();"/>
  <command id="subscription-update-all-command" oncommand="SubscriptionActions.updateAllRules();"/>
  <command id="subscription-editTitle-command" oncommand="SubscriptionActions.editTitle();"/>
  <command id="subscription-delete-command" oncommand="SubscriptionActions.remove();"/>
  <command id="subscription-showHideRules-command" oncommand="E('rulesGrippy').doCommand();"/>
  <command id="subscription-moveUp-command" oncommand="SubscriptionActions.moveUp();"/>
  <command id="subscription-moveDown-command" oncommand="SubscriptionActions.moveDown();"/>
  <command id="subscription-add-command" oncommand="SelectSubscription.start(event);"/>
  <command id="subscription-addSelected-command" oncommand="SelectSubscription.add();"/>
  <command id="subscription-addOther-command" oncommand="SelectSubscription.chooseOther();"/>
  <command id="group-add-command" oncommand="SubscriptionActions.addGroup();"/>
  <command id="rules-selectAll-command" oncommand="RuleActions.selectAll();"/>
  <command id="rules-edit-command" oncommand="RuleActions.startEditing();"/>
  <command id="rules-add-command" oncommand="RuleActions.insertRule();"/>
  <command id="rules-delete-command" oncommand="RuleActions.deleteSelected();"/>
  <command id="rules-resetHitCounts-command" oncommand="RuleActions.resetHitCounts();"/>
  <command id="rules-moveUp-command" oncommand="RuleActions.moveUp();"/>
  <command id="rules-moveDown-command" oncommand="RuleActions.moveDown();"/>
  <command id="rules-copy-command" oncommand="RuleActions.copySelected(true);"/>
  <command id="rules-cut-command" oncommand="RuleActions.copySelected(false);"/>
  <command id="rules-paste-command" oncommand="RuleActions.paste();"/>
  <command id="find-command" oncommand="E('findbar').startFind(E('findbar').FIND_NORMAL)"/>
  <command id="find-again-command" oncommand="E('findbar').onFindAgainCommand(false)"/>
  <command id="find-previous-command" oncommand="E('findbar').onFindAgainCommand(true)"/>
</commandset>

<popupset id="rulesPopupset">
  <menupopup id="rules-view-menu1" onpopupshowing="RuleActions.fillColumnPopup(this);">
    <menuitem id="rules-view-rule1" label="&rule.column;" accesskey="&rule.accesskey;" type="checkbox" disabled="true"/>
    <menuitem id="rules-view-slow1" label="&slow.column;" accesskey="&slow.accesskey;" type="checkbox" oncommand="RuleActions.toggleColumn('col-slow')"/>
    <menuitem id="rules-view-enabled1" label="&enabled.column;" accesskey="&enabled.accesskey;" type="checkbox" oncommand="RuleActions.toggleColumn('col-enabled')"/>
    <menuitem id="rules-view-hitcount1" label="&hitcount.column;" accesskey="&hitcount.accesskey;" type="checkbox" oncommand="RuleActions.toggleColumn('col-hitcount')"/>
    <menuitem id="rules-view-lasthit1" label="&lasthit.column;" accesskey="&lasthit.accesskey;" type="checkbox" oncommand="RuleActions.toggleColumn('col-lasthit')"/>
    <menuseparator/>
    <menu id="rules-sort-menu1" label="&sort.label;" accesskey="&sort.accesskey;">
      <menupopup id="rules-sort-popup1">
        <menuitem id="rules-sort-none1" label="&sort.none.label;" accesskey="&sort.none.accesskey;" type="radio" name="sortColumn" oncommand="RuleView.sortBy(null)"/>
        <menuitem id="rules-sort-rule1" label="&rule.column;" accesskey="&rule.accesskey;" type="radio" name="sortColumn" oncommand="RuleView.sortBy('col-rule')"/>
        <menuitem id="rules-sort-slow1" label="&slow.column;" accesskey="&slow.accesskey;" type="radio" name="sortColumn" oncommand="RuleView.sortBy('col-slow')"/>
        <menuitem id="rules-sort-enabled1" label="&enabled.column;" accesskey="&enabled.accesskey;" type="radio" name="sortColumn" oncommand="RuleView.sortBy('col-enabled')"/>
        <menuitem id="rules-sort-hitcount1" label="&hitcount.column;" accesskey="&hitcount.accesskey;" type="radio" name="sortColumn" oncommand="RuleView.sortBy('col-hitcount')"/>
        <menuitem id="rules-sort-lasthit1" label="&lasthit.column;" accesskey="&lasthit.accesskey;" type="radio" name="sortColumn" oncommand="RuleView.sortBy('col-lasthit')"/>
        <menuseparator/>
        <menuitem id="rules-sort-asc1" label="&sort.ascending.label;" accesskey="&sort.ascending.accesskey;" type="radio" name="sortOrder" oncommand="RuleActions.setSortOrder('ascending')"/>
        <menuitem id="rules-sort-desc1" label="&sort.descending.label;" accesskey="&sort.descending.accesskey;" type="radio" name="sortOrder" oncommand="RuleActions.setSortOrder('descending')"/>
      </menupopup>
    </menu>
  </menupopup>


  <tooltip id="rulesTooltip" onpopupshowing="RuleActions.fillTooltip(event);">
    <grid>
      <columns>
        <column/>
        <column flex="1"/>
      </columns>
      <rows>
        <row id="tooltip-rule-row" align="top">
          <label class="tooltipLabel" value="&rule.column;"/>
          <vbox id="tooltip-rule"/>
        </row>
        <row id="tooltip-hitcount-row">
          <label class="tooltipLabel" value="&hitcount.column;"/>
          <description id="tooltip-hitcount"/>
        </row>
        <row id="tooltip-lasthit-row">
          <label class="tooltipLabel" value="&lasthit.column;"/>
          <description id="tooltip-lasthit"/>
        </row>
      </rows>
    </grid>

    <description id="tooltip-additional"/>
  </tooltip>
</popupset>

<hbox id="content" flex="1">
  <tabbox id="tabs" flex="1" persist="selectedIndex">
    <tabs onselect="onTabChange(this.parentNode);">
      <tab label="&subscriptions.tab.label;"/>
      <tab label="&rules.tab.label;"/>
    </tabs>
    <tabpanels flex="1">
      <!-- subscripted switching rules -->  
      <tabpanel id="subscriptionsTab" orient="vertical" flex="1">
        <hbox>
          <checkbox id="subscriptionsAutoUpdate" label="&subscription.autoupdate.label;" accesskey="&subscription.autoupdate.accesskey;" oncommand="Prefs.subscriptions_autoupdate=this.checked;" />
          <spacer flex="1"/>
          <button id="selectSubscriptionButton" label="&addSubscription.label;" accesskey="&addSubscription.accesskey;" command="subscription-add-command"/>
        </hbox>
        <panel id="selectSubscriptionPanel" type="arrow" position="bottomcenter topleft"
               orient="vertical" onkeypress="SelectSubscription.keyPress(event);">
          <menuitem id="selectSubscriptionTemplate" hidden="true"
              class="{localePrefix ? 'localeMatch' : ''}"
              label="{node.getAttribute('title')}"
              value="{node.getAttribute('url')}">
            <label class="selectSubscriptionItem" value="{node.getAttribute('title')}"/>
            <label class="selectSubscriptionItem" value=" ("/>
            <label class="selectSubscriptionItem" value="{node.getAttribute('specialization')}"/>
            <label class="selectSubscriptionItem" value=")"/>
          </menuitem>
          <menulist id="selectSubscription">
            <menupopup/>
          </menulist>
          <hbox align="baseline">
            <label class="text-link" value="&addSubscriptionOther.label;" onclick="E('subscription-addOther-command').doCommand();"/>
            <spacer flex="1"/>
            <button id="selectSubscriptionAccept" default="true" label="&addSubscriptionAdd.label;" command="subscription-addSelected-command"/>
            <spacer flex="1"/>
            <button label="&addSubscriptionCancel.label;" oncommand="E('selectSubscriptionPanel').hidePopup();"/>
          </hbox>
        </panel>

        <richlistitem id="subscriptionTemplate" class="subscription" hidden="true" orient="vertical"
            onmousedown="this._wasSelected = (this.parentNode.selectedItem == this);"
            ondragstart="SubscriptionActions.startDrag(event, this);"
            ondragend="SubscriptionActions.endDrag();"
            ondragover="SubscriptionActions.dragOver(event);"
            ondrop="SubscriptionActions.drop(event, this);"
            oncontextmenu="SubscriptionActions.openMenu(event, this);">
          <vbox class="{subscription.disabled ? 'disabled' : ''}">
            <hbox align="center">
              <deck class="titleBox" flex="1" selectedIndex="0" onselect="event.stopPropagation();">
                <description ondblclick="if (event.button == 0) TitleEditor.start(this, true);">
                  <description value="{subscription.title}" flex="1" crop="end"/>
                  <hbox align="baseline">
                    <description value=" ("/>
                    <if condition="{isExternal}">
                      <description value="&subscription.external.label;"/>
                    <else/>
                      <if condition="{subscription.homepage}">
                        <description class="text-link" value="&subscription.homepage.label;"
                          _url="{subscription.homepage}" tooltiptext="{subscription.homepage}"
                          onclick="if (event.button == 0) { event.stopPropagation();Utils.loadInBrowser(this.getAttribute('_url')); }"/>
                        <description value=", "/>
                      </if>
                      <description class="text-link" value="&subscription.source.label;"
                        _url="{subscription.url}" tooltiptext="{subscription.url}"
                        onclick="if (event.button == 0) { event.stopPropagation();Utils.loadInBrowser(this.getAttribute('_url')); }"/>
                    </if>
                    <description value=")"/>
                  </hbox>
                </description>
                <textbox oncontextmenu="event.stopPropagation();" class="titleEditor" onkeypress="TitleEditor.keyPress(event);" onblur="TitleEditor.end(true);"/>
              </deck>
              <checkbox label="&subscription.enabled.label;" class="tabable" tabindex="-1"
                checked="{subscription.disabled ? 'false' : 'true'}" oncommand="SubscriptionActions.setDisabled(this, !this.checked);"/>
            </hbox>
            <hbox align="center">
              <description flex="1" class="status">
                <description value="&subscription.lastDownload.label;"/>
                <description value=" "/>
                <if condition="{downloading}">
                  <description value="&subscription.lastDownload.inProgress;"/>
                <elif condition="{!subscription.lastDownload}"/>
                  <description value="&subscription.lastDownload.unknown;"/>
                <else/>
                  <description value="{formatTime(subscription.lastDownload * 1000)}"/>
                  <description value=" "/>
                  <if condition="{subscription.downloadStatus}">
                    <hbox>
                      <description value=" ("/>
                      <if condition="{subscription.downloadStatus == 'synchronize_invalid_url'}">
                        <description value="&subscription.lastDownload.invalidURL;"/>
                      <elif condition="{subscription.downloadStatus == 'synchronize_connection_error'}"/>
                        <description value="&subscription.lastDownload.connectionError;"/>
                      <elif condition="{subscription.downloadStatus == 'synchronize_invalid_data'}"/>
                        <description value="&subscription.lastDownload.invalidData;"/>
                      <elif condition="{subscription.downloadStatus == 'synchronize_checksum_mismatch'}"/>
                        <description value="&subscription.lastDownload.checksumMismatch;"/>
                      <else/>   <!-- synchronize_ok -->
                        <description value="&subscription.lastDownload.success;"/>
                      </if>
                      <description value=")"/>
                    </hbox>
                  </if>
                </if>
              </description>
              <spacer flex="1"/>
              <button class="actionButton tabable" type="menu" label="&subscription.actions.label;" tabindex="-1">
                <menupopup class="actionMenu">
                  <menuitem label="&subscription.editTitle.label;" key="edit-key" command="subscription-editTitle-command"/>
                  <menuitem label="&subscription.update.label;" key="subscription-update-key" command="subscription-update-command"/>
                  <menuitem label="&subscription.showHideRules.label;" key="subscription-showHideRules-key" command="subscription-showHideRules-command"/>
                  <menuitem label="&subscription.delete.label;" key="delete-key" command="subscription-delete-command"/>
                  <menuseparator/>
                  <menuitem label="&subscription.moveUp.label;" key="moveUp-key" command="subscription-moveUp-command"/>
                  <menuitem label="&subscription.moveDown.label;" key="moveDown-key" command="subscription-moveDown-command"/>
                </menupopup>
              </button>
            </hbox>
            <description class="warning" hidden="{!subscription.isUpgradeRequired()}">&subscription.minVersion.warning;</description>
            <description class="warning" hidden="{!disabledRules}">
              &subscription.disabledRules.warning;
              <description class="text-link" value="&subscription.disabledRules.enable;" onclick="SubscriptionActions.enableRules(this);"/>
            </description>
          </vbox>
        </richlistitem>

        <deck id="noSubscriptionsDeck" flex="1">
          <description flex="1">&noSubscriptions.text;</description>
          <richlistbox id="subscriptions" class="initialFocus" flex="1"
              onselect="onSelectionChange(this);"
              ondragover="SubscriptionActions.dragOver(event);"
              ondrop="SubscriptionActions.drop(event, null);"
              onkeypress="SubscriptionActions.keyPress(event);">
          </richlistbox>
        </deck>
      </tabpanel>
      <!-- 自定义的切换规则 -->  
      <tabpanel id="rulesTab" orient="vertical" flex="1">
        <hbox pack="end">
          <button id="addGroupButton" label="&addGroup.label;" accesskey="&addGroup.accesskey;" command="group-add-command"/>
        </hbox>

        <richlistitem id="groupTemplate" class="subscription" hidden="true" orient="vertical"
            onmousedown="this._wasSelected = (this.parentNode.selectedItem == this);"
            ondragstart="SubscriptionActions.startDrag(event, this);"
            ondragend="SubscriptionActions.endDrag();"
            ondragover="SubscriptionActions.dragOver(event);"
            ondrop="SubscriptionActions.drop(event, this);"
            oncontextmenu="SubscriptionActions.openMenu(event, this);">
          <vbox class="{subscription.disabled ? 'disabled' : ''}">
            <hbox align="center">
              <deck class="titleBox" flex="1" selectedIndex="0" onselect="event.stopPropagation();">
                <description value="{subscription.title}" crop="end" ondblclick="if (event.button == 0) TitleEditor.start(this, true);"/>
                <textbox oncontextmenu="event.stopPropagation();" class="titleEditor" onkeypress="TitleEditor.keyPress(event);" onblur="TitleEditor.end(true);"/>
              </deck>
              <checkbox label="&subscription.enabled.label;" class="tabable" tabindex="-1"
                checked="{subscription.disabled ? 'false' : 'true'}" oncommand="SubscriptionActions.setDisabled(this, !this.checked);"/>
              <button class="actionButton tabable" type="menu" label="&subscription.actions.label;" tabindex="-1">
                <menupopup class="actionMenu">
                  <menuitem label="&subscription.editTitle.label;" key="edit-key" command="subscription-editTitle-command"/>
                  <menuitem label="&subscription.showHideRules.label;" key="subscription-showHideRules-key" command="subscription-showHideRules-command"/>
                  <menuitem label="&subscription.delete.label;" key="delete-key" command="subscription-delete-command"/>
                  <menuseparator/>
                  <menuitem label="&subscription.moveUp.label;" key="moveUp-key" command="subscription-moveUp-command"/>
                  <menuitem label="&subscription.moveDown.label;" key="moveDown-key" command="subscription-moveDown-command"/>
                </menupopup>
              </button>
            </hbox>
          </vbox>
        </richlistitem>

        <deck id="noRulesDeck" flex="1">
          <description flex="1">&noRules.text;</description>
          <richlistbox id="groups" class="initialFocus" flex="1"
              onselect="onSelectionChange(this);"
              ondragover="SubscriptionActions.dragOver(event);"
              ondrop="SubscriptionActions.drop(event, null);"
              onkeypress="SubscriptionActions.keyPress(event);">
          </richlistbox>
        </deck>
      </tabpanel>
    </tabpanels>
  </tabbox>

  <splitter id="rulesSplitter" persist="state" orient="horizontal" collapse="after" state="collapsed" oncommand="RuleView.refresh();onSplitterStateChange(this);">
    <grippy id="rulesGrippy"/>
  </splitter>

  <vbox id="rulesContainer" persist="width height" width="500">
    <hbox pack="end">
      <button id="findButton" label="&find.label;" accesskey="&find.accesskey;" command="find-command"/>
      <button id="ruleActionButton" type="menu" label="&rule.actions.label;">
        <menupopup id="ruleActionMenu" onpopupshowing="RuleActions.fillActionsPopup();">
          <menuitem label="&rule.edit.label;" key="edit-key" command="rules-edit-command"/>
          <menuitem label="&rule.cut.label;" key="rules-cut-key" command="rules-cut-command"/>
          <menuitem label="&rule.copy.label;" key="rules-copy-key" command="rules-copy-command"/>
          <menuitem label="&rule.paste.label;" key="rules-paste-key" command="rules-paste-command"/>
          <menuitem label="&rule.delete.label;" key="delete-key" command="rules-delete-command"/>
          <menuseparator/>
          <menuitem label="&rule.selectAll.label;" key="rules-selectAll-key" command="rules-selectAll-command"/>
          <menuitem label="&rule.resetHitCounts.label;" command="rules-resetHitCounts-command"/>
          <menuseparator/>
          <menuitem label="&rule.moveUp.label;" key="moveUp-key" command="rules-moveUp-command"/>
          <menuitem label="&rule.moveDown.label;" key="moveDown-key" command="rules-moveDown-command"/>
          <menuseparator/>
          <menu id="viewMenu" label="&viewMenu.label;"/>
        </menupopup>
      </button>
      <button id="addRuleButton" label="&addRule.label;" accesskey="&addRule.accesskey;" command="rules-add-command"/>
    </hbox>
    <tree id="rulesTree"
        flex="1"
        editable="true"
        seltype="multiple"
        enableColumnDrag="true"
        hidecolumnpicker="true"
        _removewarning="&rules.remove.warning;">
      <treecols context="rules-view-menu1">
        <treecol id="col-rule" label="&rule.column;" flex="10" persist="width ordinal sortDirection hidden"/>
        <splitter class="tree-splitter"/>
        <treecol id="col-slow" label="!" display="&slow.column;" tooltiptext="&slow.column;" flex="0" width="16" persist="width ordinal sortDirection hidden"/>
        <splitter class="tree-splitter"/>
        <treecol id="col-enabled" label="&enabled.column;" cycler="true" flex="0" persist="width ordinal sortDirection hidden" />
        <splitter class="tree-splitter"/>
        <treecol id="col-hitcount" label="&hitcount.column;" flex="0" persist="width ordinal sortDirection hidden"/>
        <splitter class="tree-splitter"/>
        <treecol id="col-lasthit" label="&lasthit.column;" hidden="true" flex="4" persist="width ordinal sortDirection hidden"/>
      </treecols>

      <treechildren id="rulesTreeChildren"
          oncontextmenu="E('ruleActionMenu').openPopupAtScreen(event.screenX, event.screenY, true);"
          tooltip="rulesTooltip"
          noGroupText="&noGroupSelected.text;"
          noRulesText="&noRulesInGroup.text;"
          ondragstart="RuleActions.startDrag(event);"
          ondragend="RuleActions.endDrag(event);"/>
    </tree>
  </vbox>
</hbox>

<findbar id="findbar"/>

<hbox id="buttons">
  <button id="backupButton" type="menu"
      label="&backupButton.label;" accesskey="&backupButton.accesskey;"
      _backupDialogTitle="&backup.label;" _restoreDialogTitle="&restore.own.label;"
      _fileRuleComplete="&backup.complete.title;" _fileRuleCustom="&backup.custom.title;"
      _backupError="&backup.error;" _restoreError="&restore.error;"
      _restoreCompleteWarning="&restore.complete.warning;" _restoreCustomWarning="&restore.custom.warning;"
      _restoreVersionWarning="&restore.minVersion.warning;"
      oncommand="if (event.target == this) Utils.runAsync(function() this.open = true, this);">
    <menupopup onpopupshowing="Backup.fillRestorePopup();">
      <menuitem id="backup" key="backup-key" label="&backup.label;" oncommand="Backup.backupToFile();"/>
      <menuseparator/>
      <menuitem id="restoreBackupTemplate" label="&restore.default.label;" hidden="true"/>
      <menuitem id="restoreOwnBackup" key="restore-key" label="&restore.own.label;" oncommand="Backup.restoreFromFile();"/>
    </menupopup>
  </button>

  <spacer flex="1"/>

  <button id="close" dlgtype="accept" label="&close.label;"/>
</hbox>

</dialog>
